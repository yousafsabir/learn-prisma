// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// About datasource
// There can only be one datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// About model
// each row in a model is a field
// each field consist of four different parts
// name, type, modifier, attributes
// modifier and attributes are optional
// modifier: symbols attached to the type like ? for optional
// attributes: starts with @
model User {
  id             String          @id @default(uuid())
  name           String
  age            Int
  email          String          @unique
  role           Role            @default(USER)
  preferences    Json
  // one-to-many relationship
  writtenPosts   Post[]          @relation("Written")
  // many-to-many relationship
  favoritePosts  Post[]          @relation("Favorite")
  UserPreference UserPreference?

  // Block level attributes: starting with double @@
  @@unique([name, age, email]) // means the combination of these 3 should be unique, no 2 user can of the same these 3 fields
  @@index([email]) // an index on the email field
}

enum Role {
  ADMIN
  USER
}

// one-to-one relationship
model UserPreference {
  id          String  @id @default(uuid())
  emailUpdate Boolean
  // one-to-one relationship with unique id
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique
}

model Post {
  id            String     @id @default(uuid())
  rating        Float
  createdAt     DateTime
  updatedAt     DateTime
  // one-to-many relationship
  author        User       @relation("Written", fields: [authorId], references: [id])
  authorId      String
  // many-to-many relationship
  favouriteBy   User?      @relation("Favorite", fields: [favouriteById], references: [id])
  favouriteById String?
  Category      Category[]
}

model Category {
  id    String @id @default(uuid())
  name  String
  posts Post[]
}

// All Modifiers: 1: ? -> optional 2: [] -> array of whatever type
